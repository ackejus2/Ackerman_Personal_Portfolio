import sagemaker
from sagemaker import get_execution_role

# Get the SageMaker session and role
sagemaker_session = sagemaker.Session()
role = get_execution_role()

# Get the image URI for the image classification algorithm
training_image = sagemaker.image_uris.retrieve('image-classification', sagemaker_session.boto_region_name)

# Initialize the SageMaker estimator 
image_classifier = sagemaker.estimator.Estimator(training_image,
                                                role, 
                                                instance_count=1, 
                                                instance_type='ml.p2.xlarge',
                                                volume_size=50,
                                                max_run=360000,
                                                input_mode='File',
                                                output_path='s3://{}/output'.format(bucket),
                                                sagemaker_session=sagemaker_session)

# Set the hyperparameters
image_classifier.set_hyperparameters(num_layers=18,
                                     use_pretrained_model=1,
                                     image_shape='3,224,224',
                                     num_classes=5,  # number of different kinds of trout
                                     mini_batch_size=128,
                                     epochs=10,
                                     learning_rate=0.01,
                                     num_training_samples=number_of_training_samples)

# Specify the data channels
train_data = sagemaker.inputs.TrainingInput('s3://{}/train/'.format(bucket), distribution='FullyReplicated', 
                                            content_type='application/x-recordio', s3_data_type='S3Prefix')

validation_data = sagemaker.inputs.TrainingInput('s3://{}/validation/'.format(bucket), distribution='FullyReplicated', 
                                                 content_type='application/x-recordio', s3_data_type='S3Prefix')

data_channels = {'train': train_data, 'validation': validation_data}

# Fit the model
image_classifier.fit(inputs=data_channels, logs=True)
